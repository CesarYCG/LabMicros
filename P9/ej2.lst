CCS PCM C Compiler, Version 4.140, 21829               01-dic-22 18:53

               Filename:   E:\P9\ej2.lst

               ROM used:   274 words (3%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           20 (5%) worst case
               Stack:     1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0D3
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16f877.h>  //Incluir la biblioteca del pic 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #device ADC=8, // Convertidor analogico digital con 8 
.................... #fuses HS, NOPROTECT, // Configuración serie asincrona 
.................... #use delay(clock=20000000) //Valor del cristal con el que trabajamos para calcular el retardo 
.................... #use rs232(baud=38400,xmit=PIN_C6,rcv=PIN_C7) // Transmision rs232 C6 TRANS y C7 RECEP 
.................... #org 0x1f00, 0x1FFF void loader16f877(void){} // Vector de SET (simpre se usa para compilar) 
*
1F00:  RETURN
....................  
.................... int conv; 
.................... long cont=0; // Contador para activar la interrupcion 
.................... // funcion de interrupción 
.................... #int_RTCC 
.................... clock_isr(){ 
....................    cont++; // Incrementa contador 
*
002F:  INCF   28,F
0030:  BTFSC  03.2
0031:  INCF   29,F
....................    // Determinamos 10 segundos 
....................    if(cont==763){ 
0032:  MOVF   28,W
0033:  SUBLW  FB
0034:  BTFSS  03.2
0035:  GOTO   0C4
0036:  MOVF   29,W
0037:  SUBLW  02
0038:  BTFSS  03.2
0039:  GOTO   0C4
....................       printf("El resultado es:=%x\n",conv); 
003A:  MOVLW  C8
003B:  BSF    03.6
003C:  MOVWF  0D
003D:  MOVLW  00
003E:  MOVWF  0F
003F:  BCF    03.0
0040:  MOVLW  11
0041:  BCF    03.6
0042:  MOVWF  2A
*
0098:  MOVF   27,W
0099:  MOVWF  2A
009A:  MOVLW  57
009B:  MOVWF  2B
*
00BE:  MOVLW  0A
00BF:  BTFSS  0C.4
00C0:  GOTO   0BF
00C1:  MOVWF  19
....................       cont=0; 
00C2:  CLRF   29
00C3:  CLRF   28
....................    }//if 
.................... }//clock_isr 
....................  
00C4:  BCF    0B.2
00C5:  BCF    0A.3
00C6:  BCF    0A.4
00C7:  GOTO   01B
.................... void main(){ 
*
00D3:  CLRF   04
00D4:  BCF    03.7
00D5:  MOVLW  1F
00D6:  ANDWF  03,F
00D7:  MOVLW  20
00D8:  BSF    03.5
00D9:  MOVWF  19
00DA:  MOVLW  A6
00DB:  MOVWF  18
00DC:  MOVLW  90
00DD:  BCF    03.5
00DE:  MOVWF  18
00DF:  CLRF   29
00E0:  CLRF   28
00E1:  BSF    03.5
00E2:  BSF    1F.0
00E3:  BSF    1F.1
00E4:  BSF    1F.2
00E5:  BCF    1F.3
....................    set_timer0(0); 
00E6:  BCF    03.5
00E7:  CLRF   01
....................    setup_counters(RTCC_INTERNAL,RTCC_DIV_256); // Fuente reloj y predivisor 
00E8:  BSF    03.5
00E9:  MOVF   01,W
00EA:  ANDLW  C0
00EB:  IORLW  07
00EC:  MOVWF  01
00ED:  CLRWDT
....................    enable_interrupts(INT_RTCC);  // Habilita interrupcion para timer0 
00EE:  BCF    03.5
00EF:  BSF    0B.5
....................    enable_interrupts(GLOBAL); // Habilita interrupciones generales 
00F0:  MOVLW  C0
00F1:  IORWF  0B,F
....................    setup_adc_ports(ALL_ANALOG); 
00F2:  BSF    03.5
00F3:  BCF    1F.0
00F4:  BCF    1F.1
00F5:  BCF    1F.2
00F6:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
00F7:  BCF    03.5
00F8:  BSF    1F.6
00F9:  BSF    1F.7
00FA:  BSF    03.5
00FB:  BCF    1F.7
00FC:  BCF    03.5
00FD:  BSF    1F.0
....................    set_adc_channel(7); 
00FE:  MOVLW  38
00FF:  MOVWF  78
0100:  MOVF   1F,W
0101:  ANDLW  C7
0102:  IORWF  78,W
0103:  MOVWF  1F
....................    while(1){ 
....................       delay_us(20); 
0104:  MOVLW  20
0105:  MOVWF  77
0106:  DECFSZ 77,F
0107:  GOTO   106
0108:  GOTO   109
0109:  NOP
....................       conv=read_adc(); 
010A:  BSF    1F.2
010B:  BTFSC  1F.2
010C:  GOTO   10B
010D:  MOVF   1E,W
010E:  MOVWF  27
....................    }//while 
010F:  GOTO   104
.................... }//main 
0110:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
